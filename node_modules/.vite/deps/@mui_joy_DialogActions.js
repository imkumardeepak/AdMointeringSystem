"use client";
import {
  dividerClasses_default
} from "./chunk-AVFYUE5D.js";
import {
  iconButtonClasses_default
} from "./chunk-53IXUZTH.js";
import {
  buttonClasses_default
} from "./chunk-4P4LPDOZ.js";
import {
  cardClasses_default
} from "./chunk-REI47JEL.js";
import {
  cardOverflowClasses_default
} from "./chunk-NQM3NQG5.js";
import "./chunk-MOQ5AOXE.js";
import "./chunk-HSNQQ32L.js";
import "./chunk-6DWJOMHT.js";
import "./chunk-NGAKOB5H.js";
import "./chunk-HUM3DWN5.js";
import {
  useSlot
} from "./chunk-JVX4MEEO.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-UENNITZM.js";
import "./chunk-GSZ7ISAW.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-3TNH6W3F.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  composeClasses,
  init_extends,
  init_objectWithoutPropertiesLoose
} from "./chunk-WONIYCJM.js";
import {
  require_prop_types
} from "./chunk-UJS64D3A.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-U224OPQK.js";
import {
  require_jsx_runtime
} from "./chunk-U73TBONF.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@mui/joy/DialogActions/DialogActions.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/joy/DialogActions/dialogActionsClasses.js
function getDialogActionsUtilityClass(slot) {
  return generateUtilityClass("MuiDialogActions", slot);
}
var dialogActionsClasses = generateUtilityClasses("MuiDialogActions", ["root"]);
var dialogActionsClasses_default = dialogActionsClasses;

// node_modules/@mui/joy/CardActions/CardActions.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
init_clsx();
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/CardActions/cardActionsClasses.js
function getCardActionsUtilityClass(slot) {
  return generateUtilityClass("MuiCardActions", slot);
}
var cardActionsClasses = generateUtilityClasses("MuiCardActions", ["root"]);

// node_modules/@mui/joy/CardActions/CardActions.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "component", "children", "buttonFlex", "orientation", "slots", "slotProps"];
var useUtilityClasses = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardActionsUtilityClass, {});
};
var StyledCardActionsRoot = styled_default("div")(({
  ownerState
}) => {
  var _ownerState$orientati;
  return _extends({
    "--Button-radius": "var(--Card-childRadius)",
    "--IconButton-radius": "var(--Card-childRadius)",
    display: "flex"
  }, ((_ownerState$orientati = ownerState.orientation) == null ? void 0 : _ownerState$orientati.startsWith("horizontal")) && {
    alignItems: "center"
    // it is common to have children aligned center in horizontal orientation, but not vertically.
  }, {
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.orientation === "horizontal-reverse" && {
    flexDirection: "row-reverse"
  }, {
    zIndex: 1,
    // render above Link's overlay
    gap: "calc(0.625 * var(--Card-padding))",
    padding: "var(--unstable_padding)",
    "--unstable_padding": "calc(0.75 * var(--Card-padding)) 0 0 0",
    [`.${cardOverflowClasses_default.root} > &`]: {
      "--unstable_padding": "calc(0.75 * var(--Card-padding)) 0 var(--Card-padding)"
    },
    [`.${cardClasses_default.root} > .${dividerClasses_default.root} + &`]: {
      "--unstable_padding": "0"
    }
  }, ownerState.buttonFlex ? {
    [`& > :not(.${iconButtonClasses_default.root})`]: {
      flex: ownerState.buttonFlex
    },
    [`& > :not(button) > .${buttonClasses_default.root}`]: {
      width: "100%"
      // for button to fill its wrapper.
    }
  } : {
    [`& > .${buttonClasses_default.root}:only-child`]: {
      flex: "auto"
    }
  });
});
var CardActionsRoot = styled_default(StyledCardActionsRoot, {
  name: "JoyCardActions",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var CardActions = React.forwardRef(function CardActions2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardActions"
  });
  const {
    className,
    component = "div",
    children,
    buttonFlex,
    orientation = "horizontal",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    buttonFlex,
    orientation
  });
  const classes = useUtilityClasses();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardActionsRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardActions.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The CSS `flex` for the Button and its wrapper.
   */
  buttonFlex: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * Used to render icon or text elements inside the CardActions if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal-reverse", "horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
} : void 0;

// node_modules/@mui/joy/DialogActions/DialogActions.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded2 = ["component", "children", "buttonFlex", "orientation", "slots", "slotProps"];
var useUtilityClasses2 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getDialogActionsUtilityClass, {});
};
var DialogActionsRoot = styled_default(StyledCardActionsRoot, {
  name: "JoyDialogActions",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var DialogActions = React2.forwardRef(function DialogActions2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDialogActions"
  });
  const {
    component = "div",
    children,
    buttonFlex,
    orientation = "horizontal-reverse",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    buttonFlex,
    orientation
  });
  const classes = useUtilityClasses2();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: DialogActionsRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime2.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? DialogActions.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The CSS `flex` for the Button and its wrapper.
   */
  buttonFlex: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * Used to render icon or text elements inside the DialogActions if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types2.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types2.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal-reverse'
   */
  orientation: import_prop_types2.default.oneOf(["horizontal-reverse", "horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types2.default.shape({
    root: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types2.default.shape({
    root: import_prop_types2.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object])
} : void 0;
var DialogActions_default = DialogActions;
export {
  DialogActions_default as default,
  dialogActionsClasses_default as dialogActionsClasses,
  getDialogActionsUtilityClass
};
//# sourceMappingURL=@mui_joy_DialogActions.js.map
